% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Run.LC.sims.time_function.R
\name{run.sims.LC.time}
\alias{run.sims.LC.time}
\title{Runs multiple latent class model simulations over time with different parameter values.}
\arguments{
\item{num_tests}{A numeric value for the number of tests to simulate and model.}

\item{days}{Number of days to simulate. Default = 365.}

\item{spec_vec}{Values of specificity for all tests as a numeric vector for each simulation. Default = \code{c(1)}.}

\item{sens_vec}{Values of sensitivity for all tests as a numeric vector for each simulation. Default = \code{c(1)}.}

\item{p_performed_vec}{Probability that each test is performed as a numeric vector for each simulation. Default = \code{c(1)}.}

\item{sim_size}{Number of individuals to simulate in each dataset. Default = 1000.}

\item{iter}{The number of iterations for the stan model. Default = 1000.}

\item{chains}{The number of chains for the stan model. Default = 4.}

\item{warmup}{The number of warmup iterations for the stan model. Default = 500.}

\item{stan_arg}{Optional extra arguments to pass to the rstan::sampling function. Default = NULL.}

\item{data_ID}{Optional character identifier for labeling data outputs. Default = \code{"sims"}.}

\item{prior_spec}{Specification of specificity prior. A list of length equal to the value of num_tests with each element containing a vector of length two specifying the alpha and beta parameters for the Beta prior. Default = c(10, 1) for each test.}

\item{prior_sens}{Specification of sensitivity prior. A list of length equal to the value of num_tests with each element containing a vector of length two specifying the alpha and beta parameters for the Beta prior. Default = c(1, 1) for each test.}

\item{seed}{Random seed for set.seed(). Default = 953.}

\item{Est_R_window}{Size, in number of days, of sliding window for custom R(t) estimation. Default = 14.}

\item{Est_R_n_samples}{Number of samples for uncertainty estimation in custom R(t). Default = 1000.}

\item{mean_gi}{Mean generation interval used for estimating R(t) from EpiEstim. Default = 1/gamma.}

\item{max_t}{Maximum time (days) used for calculating the gi_distribution for estimating R(t) from EpiEstim. Default = 5 * mean_gi}

\item{years}{Number of years to run the SIR model. Default = 50.}

\item{N}{Population size used in the SIR model. Default = 1.}

\item{init}{Initial state of the SIR model as a list. Default = init = list(init_S = 0.99, init_I = 0.01, init_R = 0).}

\item{SIR_params}{list of SIR parameters to simulate prevalence over time for a seasonal disease. Includes:
\describe{
\item{beta_0}{Baseline transmission rate}
\item{desired_R0}{Desired basic reproduction number (R0) - used to calculate beta_0 if beta_0 is null.}
\item{beta_1}{Amplitude of seasonal forcing}
\item{phi}{Phase shift of seasonal forcing}
\item{gamma}{Recovery rate}
\item{omega}{Waning immunity rate}
Default = beta0 = NULL, desired_R0 = 2.5, beta1 = 0.07, phi = 1.5, gamma = 0.03, omega = 0.001.
If beta0 is null it is calculated as desired_R0 * gamma.
}}

\item{exp_params}{list of exponential model parameters to simulate prevalence over time at the start of an epidemic. Includes:
\describe{
\item{I0}{Initial disease prevalence}
\item{beta_0}{Baseline transmission rate}
\item{gamma}{Recovery rate}
Default = I0 = 0.0001, beta0 = 0.06, gamma = 0.04.
}}

\item{time_model}{If covariates includes "Time", which model should be used to infer changing prevalence over time - "gaussian" (for a seasonal peak) or "exponential". Default = "gaussian".}
}
\value{
Stan model fit and various summary outputs.
A list containing:
\describe{
\item{sim_inputs}{A data frame of all simulation input parameters per model run.
Output from sim.test.data.time()$test_parameters}
\item{sim_data}{A data frame of all simulated data per model run.
Output from sim.test.data.time()$sim_data}
\item{stan_results_df}{A data frame of posterior estimates and 95\% credible intervals
for sensitivity, specificity, and prevalence for each simulation for each week simulated.
Sensitivity and specificity values are repeated for each week but are not time-varying parameters in this model.}
\item{divergence_summary}{A data frame summarising any divergent transitions or low ESS in the Stan models.
Output from check.divergent.transitions().}
\item{R_estimates}{A data frame summarising of different R estimates and growth rate estimates combined from sim.test.data.time() function outputs}
}
}
\description{
Runs multiple simulations of a bayesian LC stan model to infer true disease prevalence over time for a seasonal disease, test sensitivity, and specificity from
simulated test data with different parameters values (sensitivity, specificity, and probability of the test occurring).
Can simulate multiple test results but all with identical parameters.
Can run different parameter combinations in parallel using furrr::future_map. Need to first define future and number of cores to parallise (workers) using future::plan(future::multisession, workers= ).
This is separate to rstan parallel processing of chains which uses options(mc.cores = num_chains)
Parallel processing i.e workers >1 will not work if using devtools::load_all()
}
\details{
For each combination of sensitivity, specificity, prevalence, and test performance probability,
the function:
\enumerate{
\item Simulates test results for a population of individuals using the \code{sim.test.data()} function.
\item Fits a Bayesian latent class model using \code{run.LC.model()}.
\item Extracts posterior summaries for each test's sensitivity and specificity, as well as disease prevalence.
\item Records model diagnostics, including checking for divergent transitions.
}

Simulated test parameters and model estimates are stored in separate data frames, and intermediate
variables are cleared after each run to conserve memory.
}
\examples{
if (interactive()) {
 results <- run.sims.LC.time(num_tests = 4,
                       spec_vec = c(1),
                       sens_vec = c(1),
                       p_performed_vec= c(1),
                       sim_size = 100,
                       chains = 2,
                       data_ID = "sims_time")
}


}
